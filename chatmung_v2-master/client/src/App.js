import React, { useRef, useState } from "react";

function App() {
  const [question, setQuestion] = useState('');
  const [reply, setReply] = useState('');

  const audioRef = useRef(null);

  const checkText = async () => {
    setReply("......");
    setQuestion("");
    setTimeout(() => {
      audioRef.current.play();
    }, 500)
    if (question.length < 1) {
      setTimeout(() => {
        setReply("Ìï† ÎßêÏùÑ Ï†ÅÏñ¥Îã¨Îùº Î©ç!");
      }, 1000);
    } else {
      if (question.includes("Î∂àÍ∫º") || question.includes("Î∂àÎÅÑ") || question.includes("Î∂à Í∫º")) {
        setTimeout(() => {
          setReply("ÏïåÍ≤†Îã§ Î©ç! Î∂àÎÅÑÍ≤†Îã§ Î©ç!");
          document.body.classList.add("dark");
        }, 1000);
      } else if (question.includes("Î∂àÏºú") || question.includes("Î∂àÌÇ§") || question.includes("Î∂à Ïºú")) {
        setTimeout(() => {
          setReply("ÏïåÍ≤†Îã§ Î©ç! Î∂àÌÇ§Í≤†Îã§ Î©ç!");
          document.body.classList.remove("dark");
        }, 1000);
      } else if (question.includes("ÏïàÎÖï")) {
        setTimeout(() => {
          setReply("ÏïàÎÖïÌïòÎã§ Î©ç!");
        }, 1000);
      } else if (question.includes("Î∞òÍ∞Ä") || question.includes("Î∞òÍ∞ë") || question.includes("Î∞©Í∞Ä")) {
        setTimeout(() => {
          setReply("ÎÇòÎèÑ Î∞òÍ∞ëÎã§ Î©ç!");
        }, 1000);
      } else if (question.includes("Î≠êÌï¥") || question.includes("Î≠êÌïò")) {
        setTimeout(() => {
          setReply("Îãà ÏÉùÍ∞ÅÌïúÎã§Î©ç~( Õ°¬∞ Õú ñ Õ°¬∞ )");
        }, 1000);
      } else if (question.includes("ÏÇ¨Îûë")) {
        setTimeout(() => {
          setReply("ÎÇòÎèÑ ÏÇ¨ÎûëÌïúÎã§Î©ç!üíï");
        }, 1000);
      } else if (question.includes("ÎçîÏõå") || question.includes("Îç•Îã§") || question.includes("Îç•ÏßÄ") || question.includes("ÎçîÏö¥")) {
        const hotArr = ['Ìó•Ìó• ÎÑàÎ¨¥ Îç•Îã§Î©ç!', 'Î∞îÎã§Ïóê ÌêÅÎãπ Îπ†ÏßÄÍ≥† Ïã∂ÏùÄ ÎÇ†Ïî®Îã§ Î©ç!', 'ÏóêÏñ¥Ïª® Î∞úÎ™ÖÍ∞ÄÏóêÍ≤å Í∞êÏÇ¨Ìïú ÎÇòÎÇ†Îì§Ïù¥Îã§Î©ç!', 'ÏàòÏòÅÌïòÍ≥† Ïã∂Îã§ Î©ç!'];
        setTimeout(() => {
          setReply(hotArr[Math.floor(Math.random() * hotArr.length)]);
        }, 1000);
      } else if (question.includes("Ï∂îÏõå") || question.includes("Ï∂•Îã§") || question.includes("Ï∂•ÏßÄ") || question.includes("Ï∂îÏö¥")) {
        const coldArr = ['ÏúºÏúº ÎÑàÎ¨¥ Ï∂•Îã§ Î©ç!', 'Ïò®Ï≤úÏóê Î™∏ÏùÑ Ìëπ ÏßÄÏßÄÍ≥† Ïã∂ÏùÄ ÎÇ†Ïî®Îã§ Î©ç!', 'Ï†ÑÍ∏∞Ïû•Ìåê Î∞úÎ™ÖÍ∞ÄÏóêÍ≤å Í∞êÏÇ¨Ìïú ÎÇ†Ïù¥Îã§ Î©ç!', 'Îú®Í±∞Ïö¥ Ìï´Ï¥àÏΩîÍ∞Ä Îï°Í∏¥Îã§ Î©ç!'];
        setTimeout(() => {
          setReply(coldArr[Math.floor(Math.random() * coldArr.length)]);
        }, 1000);
      } else if (question.includes("Î™á Ïãú") || question.includes("Î™áÏãú") || question.includes("Î™áÏãúÏïº")) {
        const now = new Date();
        const getTime = now.getHours() + "Ïãú " + now.getMinutes() + "Î∂Ñ";
        const timeArr = [getTime + "Ïù¥Îã§ Î©ç!", 'ÏÑπÏãú~üíã', 'Ï†ëÏãú~~üòâ', 'ÌÉùÏãú~üöñ', 'ÎÇöÏãú~üêü'];
        setTimeout(() => {
          setReply(timeArr[Math.floor(Math.random() * timeArr.length)]);
        }, 1000);
      } else {
        const response = await fetch('https://chatmung.herokuapp.com/api/chat', {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            question: question
          })
        });
        const data = await response.json();
        if (response.status !== 200) {
          throw data.error || new Error(`Request failed with status ${response.status}`);
        }
        setReply(data.message)
      }
    }
  }

  const onEnterDown = (e) => {
    if (e.key === 'Enter') {
      checkText();
    }
  }

  return (
    <div className="base">
      <div className="dogSays">
        <img src={process.env.PUBLIC_URL + "chat.png"} />
        <p className="dogText" id="dogConsole">{reply === "" ? "Welcome to Ï±óÎ©ç!" : reply}</p>
      </div>
      <img className="dog" src={process.env.PUBLIC_URL + "dog.png"} />
      <div className="inputLayout">
        <input
          onChange={e => setQuestion(e.target.value)}
          placeholder='ÏßàÎ¨∏ÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî.'
          value={question}
          type="text"
          id="console"
          className="inputStyle"
          autoFocus
          onKeyDown={e => onEnterDown(e)} />
      </div>
      <div id="button" className="button" onClick={checkText}>
        ÎßêÍ±∏Í∏∞
      </div>
      <audio ref={audioRef} src={process.env.PUBLIC_URL + "mung.mp3"} />
    </div>
  );
}

export default App;
